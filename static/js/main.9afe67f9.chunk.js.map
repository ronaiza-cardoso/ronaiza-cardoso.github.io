{"version":3,"sources":["styles/GlobalStyle.js","pages/Home/style.js","components/Header/styles.js","components/Header/index.js","components/Hi/styles.js","components/Hi/index.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","header","Logo","h1","nav","Header","fadeInUp","keyframes","typing","blink","bounce","Content","GreetingContainer","GreetingLine","Description","p","img","Hi","Home","parallax","useRef","onItemClicked","item","current","scrollTo","ref","pages","style","position","offset","speed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gxBAEA,IAuCeA,EAvCKC,YAAH,K,oLCAV,IAAMC,EAAYC,IAAOC,IAAV,K,mzCCAf,IAAMF,EAAYC,IAAOE,OAAV,KAcTC,EAAOH,IAAOI,GAAV,KAMcJ,IAAOK,IAAV,KAQLL,IAAOC,IAAV,KClBLK,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,Y,u/ECLN,IAAMC,EAAWC,YAAH,KAWRC,EAASD,YAAH,KAYNE,EAAQF,YAAH,KAMLG,EAASH,YAAH,KAKCI,EAAUZ,IAAOC,IAAV,KAIPY,EAAoBb,IAAOC,IAAV,KASjBa,EAAed,IAAOI,GAAV,IAULG,GAGPQ,EAAcf,IAAOgB,EAAV,IAaTP,EACTC,GA8BmBV,IAAOiB,IAAV,IAcFN,GCnGLO,MAjBf,WACE,OACE,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,eACA,kBAAC,EAAD,cAEF,kBAAC,EAAD,yDACsD,IACpD,wCAFF,SAE6B,oDCYtBC,MAlBf,WACE,IAAMC,EAAWC,mBAEjB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQC,cAAe,SAACC,GAAD,OAAUH,EAASI,QAAQC,SAASF,MAE3D,kBAAC,IAAD,CAAUG,IAAKN,EAAUO,MAAO,EAAGC,MAAO,CAAEC,SAAU,aACpD,kBAAC,IAAD,CAAeC,OAAQ,EAAGC,MAAO,IAEjC,kBAAC,IAAD,CAAeD,OAAQ,EAAGC,MAAO,IAC/B,kBAAC,EAAD,UCXKC,MAJf,WACE,OAAO,kBAAC,EAAD,OCUWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9afe67f9.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  body,html {\n    \n      height: 100vh;\n\n      font-family: 'Inter', sans-serif;\n      font-size: 16px;\n  }\n  * {\n      box-sizing: border-box;\n\n      margin: 0;\n      padding: 0;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 10px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    border-radius: 8px;\n    background: #333;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n\n`\n\nexport default GlobalStyle\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n\n  background: #fdd;\n  position: relative;\n`\n","import styled from 'styled-components'\n\nexport const Container = styled.header`\n  width: 100vw;\n  height: 10vh;\n\n  background: #eee;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  position: sticky;\n  top: 0;\n`\n\nexport const Logo = styled.h1`\n  font-weight: 300;\n\n  font-family: 'Playfair Display', serif;\n  margin: 1rem;\n`\nexport const NavBarContainer = styled.nav`\n  margin: 1rem;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const NavItem = styled.div`\n  position: relative;\n  font-weight: 300;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  padding: 16px;\n  margin: 1rem;\n\n  &:before,\n  &:after {\n    content: '';\n    position: absolute;\n    width: 0%;\n    height: 2px;\n    top: 50%;\n    margin-top: -0.5px;\n    background: #333;\n  }\n\n  &:before {\n    left: -2.5px;\n  }\n  &:after {\n    right: 2.5px;\n    background: #333;\n    transition: width 0.8s cubic-bezier(0.22, 0.61, 0.36, 1);\n  }\n\n  &:hover:before {\n    background: #333;\n    width: 100%;\n    transition: width 0.5s cubic-bezier(0.22, 0.61, 0.36, 1);\n  }\n\n  &:hover:after {\n    background: transparent;\n    width: 100%;\n    transition: 0s;\n  }\n`\n","import React from 'react'\n\nimport * as S from './styles'\n\nfunction Header() {\n  return (\n    <S.Container>\n      <S.Logo>R</S.Logo>\n    </S.Container>\n  )\n}\n\nexport default Header\n","import styled, { keyframes } from 'styled-components'\n\nconst fadeInUp = keyframes`\n  from {\n    transform: translate3d(0,40px,0)\n  }\n\n  to {\n    transform: translate3d(0,0,0);\n    opacity: 1\n  }\n`\n\nconst typing = keyframes`\n  0% {\n    width: 0;\n  }\n  1% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 1;\n  }\n`\n\nconst blink = keyframes`\n  50% {\n    border-color: transparent;\n  }\n`\n\nconst bounce = keyframes`\n  0%   { transform: scale(1,1)      translateY(-100px); }\n  100% { transform: scale(1,1)      translateY(0); }\n`\n\nexport const Content = styled.div`\n  padding: 2rem;\n`\n\nexport const GreetingContainer = styled.div`\n  width: 50%;\n  height: 50vh;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-bottom: 10vw;\n`\n\nexport const GreetingLine = styled.h1`\n  font-size: clamp(35px, 35vw, 310px);\n  line-height: clamp(35px, 35vw, 270px);\n  font-weight: 300;\n\n  font-family: 'Playfair Display', serif;\n\n  animation-duration: 1s;\n  animation-fill-mode: both;\n  opacity: 0;\n  animation-name: ${fadeInUp};\n`\n\nexport const Description = styled.p`\n  color: grey;\n  font-size: clamp(16px, 5vw, 25px);\n  font-weight: 300;\n  margin-top: 3rem;\n\n  white-space: nowrap;\n  overflow: hidden;\n  border-right: 0.15em solid #efadce;\n\n  display: inline-block;\n  width: 60%;\n  opacity: 0;\n  animation: ${typing} 2s steps(20, end),\n    ${blink} 0.5s step-end infinite alternate;\n  animation-delay: 1s;\n  animation-fill-mode: forwards;\n\n  white-space: nowrap;\n  strong {\n    display: inline-block;\n    position: relative;\n    color: #333;\n\n    &::after {\n      background-color: pink;\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      transition: transform 250ms;\n      z-index: -1;\n      width: 100%;\n      height: 100%;\n    }\n\n    &:hover::after {\n      transform: scale(1.1);\n    }\n  }\n`\n\nexport const ArrowDown = styled.img`\n  position: absolute;\n  left: 0px;\n  right: 0px;\n  bottom: 80px;\n  display: block;\n  margin-right: auto;\n  margin-bottom: 40px;\n  margin-left: auto;\n  width: min(4vw, 1vw);\n\n  transform-origin: bottom;\n  animation-duration: 2s;\n\n  animation-name: ${bounce};\n  animation-timing-function: cubic-bezier(0.28, 0.84, 0.42, 1);\n`\n","import React from 'react'\n\nimport * as S from './styles'\n\nfunction Hi() {\n  return (\n    <>\n      <S.Content>\n        <S.GreetingContainer>\n          <S.GreetingLine>Hello,</S.GreetingLine>\n          <S.GreetingLine>You.</S.GreetingLine>\n        </S.GreetingContainer>\n        <S.Description>\n          I&apos;m Rona√≠za, a frontend developer transforming{' '}\n          <strong>data</strong> into <strong>information.</strong>\n        </S.Description>\n      </S.Content>\n    </>\n  )\n}\n\nexport default Hi\n","import React, { useRef } from 'react'\n\nimport { Parallax, ParallaxLayer } from 'react-spring/addons'\n\nimport * as S from './style'\nimport Header from '../../components/Header'\nimport Hi from '../../components/Hi'\n\nfunction Home() {\n  const parallax = useRef()\n\n  return (\n    <S.Container>\n      <Header onItemClicked={(item) => parallax.current.scrollTo(item)} />\n\n      <Parallax ref={parallax} pages={4} style={{ position: 'relative' }}>\n        <ParallaxLayer offset={0} speed={1} />\n\n        <ParallaxLayer offset={0} speed={0.1}>\n          <Hi />\n        </ParallaxLayer>\n      </Parallax>\n    </S.Container>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return <Home />\n}\n\nexport default App\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport GlobalStyle from './styles/GlobalStyle'\n\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}